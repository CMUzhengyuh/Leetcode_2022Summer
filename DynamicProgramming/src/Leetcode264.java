/**
 * 09/08/2022
 */
public class Leetcode264 {
    /**
     * Leetcode 264 - Ugly Number II (Medium)
     * TC: O(n)
     * SC: O(n)
     * 1D Dynamic Programming with fixed array length = n:
     * Each slot represents the n-th ugly number. Use three indexes and three
     * factors to record the index of corresponding existed ugly number and
     * next possible factors. The next one is generated by the minimum among
     * those three factors. If one or more of them is selected, update both
     * the indexes and factors.
     */
    public int nthUglyNumber(int n) {
        int[] dp = new int[n];
        dp[0] = 1;
        int i2 = 0, i3 = 0, i5 = 0;
        int f2 = 2, f3 = 3, f5 = 5;
        for (int i = 1; i < n; i++) {
            int min = Math.min(Math.min(f2, f3), f5);
            dp[i] = min;
            if (f2 == min)
                f2 = 2 * dp[++i2];
            if (f3 == min)
                f3 = 3 * dp[++i3];
            if (f5 == min)
                f5 = 5 * dp[++i5];
        }
        return dp[n - 1];
    }
}
